plugins {
  id 'build.core'
  id 'maven-publish'
  id 'signing'
}

def configurePublishMavenPom(MavenPublication maven) {
  maven.pom {
    name = project.name
    description = project.description
    url = configs.url
    inceptionYear = configs.inceptionYear
    scm {
      connection = "scm:git:${configs.url}.git"
      developerConnection = "scm:git:${configs.url}.git"
      url = configs.url
    }
    if (configs.licenses != null) {
      licenses {
        configs.licenses.forEach { each ->
          license {
            name = each.name
            url = each.url
          }
        }
      }
    }
    if (configs.developers != null) {
      developers {
        configs.developers.forEach { each ->
          developer {
            email = each.email
          }
        }
      }
    }
    printer.debug("maven-pom.name: ${name.get()}")
    printer.debug("maven-pom.description: ${description.get()}")
  }
}

def configurePublishRepositories(RepositoryHandler repositories) {
  if (configs.publish.isSnapshot) {
    repositories.maven {
      name = configs.publish.snapshotId
      url = configs.publish.urls.snapshot
      printer.debug("snapshot.name: $name")
      printer.debug("snapshot.url: $url")
      credentials {
        username = getProperty("publish${name.capitalize()}Username")
        password = getProperty("publish${name.capitalize()}Password")
        printer.debug("snapshot.username: $username")
        printer.debug("snapshot.password: $password")
      }
    }
  } else {
    repositories.maven {
      name = configs.publish.releaseId
      url = configs.publish.urls.release
      printer.debug("release.name: $name")
      printer.debug("release.url: $url")
      credentials {
        username = getProperty("publish${name.capitalize()}Username")
        password = getProperty("publish${name.capitalize()}Password")
        printer.debug("release.username: $username")
        printer.debug("release.password: $password")
      }
    }
  }
}

def configureSigning() {
  signing {
    def signingName = configs.publish.signingId
    def signingKeyId = getProperty("signing${signingName.capitalize()}KeyId")
    def signingPassword = getProperty("signing${signingName.capitalize()}Password")
    def signingKey = utils.readFileAsString(getProperty("signing${signingName.capitalize()}KeyFile"), "UTF-8")
    printer.debug("signing.signingKeyId: $signingKeyId")
    printer.debug("signing.signingPassword: $signingPassword")
    printer.debug("signing.signingKey: $signingKey")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
  }
}

ext["configurePublishMavenPom"] = this.&configurePublishMavenPom
ext["configurePublishRepositories"] = this.&configurePublishRepositories
ext["configureSigning"] = this.&configureSigning