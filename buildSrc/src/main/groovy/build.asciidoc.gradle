import java.util.function.BiFunction

plugins {
  id 'build.core'
}

//asciidoc -> html
task(group: "asciidoc", "convertAsciidocToHtml") {
  doLast {
    convertFiles("adoc", "html", rootProject, printer) { from, to ->
      return "$asciidoctorBin -b html $from.path -o $to.path"
    }
  }
}

//asciidoc -> docbook
task(group: "asciidoc", "convertAsciidocToDocBook") {
  doLast {
    convertFiles("adoc", "xml", rootProject, printer) { from, to ->
      return "$asciidoctorBin -b docbook $from.path -o $to.path"
    }
  }
}

//html -> markdown
task(group: "asciidoc", "convertHtmlToMarkdown") {
  doLast {
    convertFiles("html", "md", rootProject, printer) { from, to ->
      return "$pandocBin -s -f html -t markdown_strict $from.path -o $to.path"
    }
  }
}

//asciidoc -> html, markdown
task(group: "asciidoc", "convertAsciidocToHtmlMarkdown") {
  doLast {
    for (action in convertAsciidocToHtml.actions) {
      action.execute(convertAsciidocToHtml)
    }
    //for (action in convertAsciidocToDocBook.actions) {
    //  action.execute(convertAsciidocToDocBook)
    //}
    for (action in convertHtmlToMarkdown.actions) {
      action.execute(convertHtmlToMarkdown)
    }
  }
}

private static void convertFiles(
  String fromExtName, String toExtName, rootProject, printer, BiFunction<File, File, String> cmd) {
  List<File> files = findFiles(fromExtName, rootProject, printer)
  files.forEach {
    File toFile = new File("${it.path.substring(0, it.path.length() - (fromExtName.length() + 1))}.$toExtName")
    String cmdString = cmd.apply(it, toFile)
    printer.info("Execute $cmdString")
    def errorBuilder = new StringBuilder()
    def cmdProcess = cmdString.execute()
    cmdProcess.consumeProcessErrorStream(errorBuilder)
    cmdProcess.waitFor()
    def error = errorBuilder.toString()
    if (!error.isEmpty()) {
      printer.info("Execution error: $error")
      return
    }
    printer.info("Execution successful")
  }
}

private static List<File> findFiles(String extName, rootProject, printer) {
  List<String> dirList = new LinkedList<>()
  if (!rootProject.hasProperty("convertAsciidocDirs")) {
    printer.info("Property convertAsciidocDirs not found, use default path: docs")
    dirList.add("docs")
  } else {
    String convertAsciidocDirs = rootProject.getProperty("convertAsciidocDirs")
    for (dir in convertAsciidocDirs.split(",")) {
      dirList.add(dir.trim())
    }
  }
  List<File> result = new LinkedList<>()
  for (dir in dirList) {
    def dirFile = new File("${rootProject.rootDir.path}${File.separator}${dir}")
    if (!dirFile.exists()) {
      printer.info("Asciidoc path not found and skipped: $dirFile")
    }
    for (htmlFile in dirFile.listFiles(new FilenameFilter() {
      @Override
      boolean accept(File parent, String name) {
        return name.endsWith(".$extName")
      }
    })) {
      result.add(htmlFile)
    }
  }
  return result
}